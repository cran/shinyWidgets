% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module-pickerGroup.R
\name{pickerGroup-module}
\alias{pickerGroup-module}
\alias{pickerGroupUI}
\alias{pickerGroupServer}
\title{Picker Group}
\usage{
pickerGroupUI(id, params, label = NULL, btn_label = "Reset filters",
  options = list())

pickerGroupServer(input, output, session, data, vars)
}
\arguments{
\item{id}{Module's id.}

\item{params}{a named list of parameters passed to each `pickerInput`, you can use :
`inputId` (obligatory, must be variable name), `label`, `placeholder`.}

\item{label}{character, global label on top of all labels.}

\item{btn_label}{reset button label.}

\item{options}{See \code{\link{pickerInput}} options argument.}

\item{input}{standard \code{shiny} input.}

\item{output}{standard \code{shiny} output.}

\item{session}{standard \code{shiny} session.}

\item{data}{a \code{data.frame}, or an object coercible to \code{data.frame}.}

\item{vars}{character, columns to use to create filters,
must correspond to variables listed in \code{params}.}
}
\value{
a \code{reactive} function containing data filtered.
}
\description{
Group of mutually dependent `pickerInput` for filtering data.frame's columns.
}
\examples{
\dontrun{

if (interactive()) {

library(shiny)
library(shinyWidgets)


data("mpg", package = "ggplot2")


ui <- fluidPage(
  fluidRow(
    column(
      width = 10, offset = 1,
      tags$h3("Filter data with picker group"),
      panel(
        pickerGroupUI(
          id = "my-filters",
          params = list(
            manufacturer = list(inputId = "manufacturer", title = "Manufacturer:"),
            model = list(inputId = "model", title = "Model:"),
            trans = list(inputId = "trans", title = "Trans:"),
            class = list(inputId = "class", title = "Class:")
          )
        ), status = "primary"
      ),
      dataTableOutput(outputId = "table")
    )
  )
)

server <- function(input, output, session) {
  res_mod <- callModule(
    module = pickerGroupServer,
    id = "my-filters",
    data = mpg,
    vars = c("manufacturer", "model", "trans", "class")
  )
  output$table <- renderDataTable(res_mod())
}

shinyApp(ui, server)

}

}
}
